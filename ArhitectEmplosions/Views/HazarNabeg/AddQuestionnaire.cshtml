<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <style>
        .alert {
            padding: 15px;
            border: 1px solid #d6e9c6;
            border-radius: 4px;
            color: #3c763d;
            background-color: #dff0d8;
        }

        #parent_popup {
            background: grey;
            height: 100%;
            position: fixed;
            width: 100%;
            z-index: 100;
            top: 0;
            left: 0;
        }

        #popup {
            background-color: #fff;
            position: fixed;
            opacity: 0.9;
            top: 100px;
            left: 40%;
            color: black;
            width: 300px;
        }

    </style>
    <title>Быстрый старт. Размещение интерактивной карты на странице</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <script src="https://api-maps.yandex.ru/2.1/?apikey=d5e25ddd-0718-4acb-a851-ff855eddb60d&lang=ru_RU" type="text/javascript"> </script>
</head>
<body>
    <input type="button" id="addDiv" value="Добавление анкет" />
    <input type="button" id="lookDiv" value="Просмотр введенных данных" />
    <input type="button" id="teach" value="Как отправить анкету?" />
    <div id="parent_popup" style="display: none">
        <div id="popup">
            <p>1. Выберите тип (положительная, отрицательная, нейтральная) и нажмите "Добавить эмоцию"</p>
            <p>2. Нажмите на карте необходимое количество точек (от 3 до 7), если точек меньше 7, то нажать на точку эмоции и выбрать "Завершить"</p>
            <p>3. Заполните дифференцируемые значения (пол, проживание и так далее)</p>
            <p>4. Заполните поля для комментариев при их наличии</p>
            <p>5. После заполнения анкеты нажмите на "Сохранить анкету"</p>
            <p>6. На чистой карте введите новую анкету</p>
            <p>7. После заполнения всех анкет, нажмите "Просмотр введенных анкет", просмотрите данные при необходимости и нажмите "Отправить"</p>
            <p style="cursor: pointer;" onclick="document.getElementById('parent_popup').style.display='none';">Закрыть</p>
        </div>
    </div>
    <div id="addVar">
        <div style="display:flex; justify-content: space-between; margin-top:10px; height: 100%">
            <div style="width:400px; height: 820px; display:flex; flex-direction:column; font-size: 13px;">
                <div style=" width:200px; display:flex; flex-direction:column;">
                    <h3>Пол</h3>
                    <div style="height:20%; display:flex; justify-content:space-between">
                        <p><input type="radio" name="Gender" value="Муж" checked />Муж </p>
                        <p><input type="radio" name="Gender" value="Жен" />Жен</p>
                    </div>
                </div>

                <h3>Где вы живете?</h3>
                <div style="display:flex; flex-direction:column; flex-wrap: wrap; height:20%">
                    <p><input type="radio" name="Place" value="В общежитии" checked />В общежитии</p>
                    <p><input type="radio" name="Place" value="Район Черниковка" />Район Черниковка</p>
                    <p><input type="radio" name="Place" value="В другой части города" />В другой части города</p>
                    <p><input type="radio" name="Place" value="За городом" />За городом </p>
                    <p><input type="radio" name="Place" value="В другом городе" />В другом городе </p>
                </div>

                <h3>Вы посещаете кампус как:</h3>
                <div style=" display:flex; flex-direction:column;flex-wrap: wrap; height:20%">
                    <p><input type="radio" name="Visiting" value="Студент-бакалавр" checked />Студент-бакалавр</p>
                    <p><input type="radio" name="Visiting" value="Студент-Магистр" />Студент-Магистр</p>
                    <p><input type="radio" name="Visiting" value="Студент-аспирант" />Студент-аспирант</p>
                    <p><input type="radio" name="Visiting" value="Преподаватель" />Преподаватель</p>
                    <p><input type="radio" name="Visiting" value="Сотрудник ВУЗа" />Сотрудник ВУЗа</p>
                    <p><input type="radio" name="Visiting" value="Гость" />Гость</p>
                    <p><input type="radio" name="Visiting" value="Партнер ВУЗа" />Партнер ВУЗа</p>
                    <p><input type="radio" name="Visiting" value="Горожанин" />Горожанин</p>
                </div>

                <h3>Возраст</h3>
                <div style=" display:flex; flex-direction:column; flex-wrap: wrap; height:20%">
                    <p><input type="radio" name="Age" value="14-17" checked />14-17</p>
                    <p><input type="radio" name="Age" value="18-24" />18-24</p>
                    <p><input type="radio" name="Age" value="25-35" />25-35</p>
                    <p><input type="radio" name="Age" value="36-45" />36-45</p>
                    <p><input type="radio" name="Age" value="46-60" />46-60</p>
                    <p><input type="radio" name="Age" value="61-74" />61-74</p>
                    <p><input type="radio" name="Age" value="75 и более" />75 и более</p>
                </div>
            </div>
            <div id="map" style="width: 1200px; height: 820px; border:solid; margin-right:10px"></div>
            <div style="display:flex; flex-direction:column; height: 100%; margin-left:10px; padding-left:10px; padding-right:10px;">

                <div style="width: 100%; height: 40%; margin-left:10px;">
                    <h2>Добавить эмоцию на карте</h2>
                    <input type="radio" name="emot" value="#58FF008F" checked />Положительная<br>
                    <input type="radio" name="emot" value="#FF00008F" />Отрицательная<br>
                    <input type="radio" name="emot" value="#FFF200AB" />Нейтральная<br>
                    <button id="createPolygon">Добавить эмоцию</button><br>
                </div>
                <div style="width: 100%; height: 80%; margin-left:10px; padding-left:10px; padding-right:10px;">
                    <h2>Комментарии к положительным эмоциям</h2>
                    <textarea id="comment" name="comment" placeholder="Написать комментарий" style="width:100%; height:100px"></textarea>
                    <h2>Комментарии к отрицательным эмоциям</h2>
                    <textarea id="comment" name="comment" placeholder="Написать комментарий" style="width:100%; height:100px"></textarea>
                    <h2>Комментарии к нейтральным эмоциям</h2>
                    <textarea id="comment" name="comment" placeholder="Написать комментарий" style="width:100%; height: 100px"></textarea>
                    <button id="createQuest">Сохранить анкету</button><br>
                </div>
            </div>
        </div>
    </div>
    <div style="display:none" id="pushVar">
        <div style="display:flex; justify-content:space-between; margin-top:10px; height: 100%;">
            <div style="width:25%">
                <div style="border:solid; border-color: green; border-radius:5px; border-left-color:white;">
                    <div id="quests">
                    </div>
                    <button id="sendBtn">Отправить</button>
                </div>
            </div>
            <div id="mapLook" style="width: 70%; height: 820px;"></div>
        </div>
    </div>
</body>
</html>
<script>
    let path = "";
    class Point {
        X;
        Y;
        constructor(x, y) {
            this.X = x;
            this.Y = y;
        }
    }
    class Emotion {
        Color;
        Points;
        constructor(coord, color) {
            this.Points = [];
            this.Color = color;
            for (var i = 0; i < coord[0].length; i++) {
                this.Points.push(new Point(coord[0][i][0], coord[0][i][1]));
            }
        }
    }
    class Diffetentiation {
        Gender;
        Place;
        Visiting;
        Age;
        constructor(gender, place, visit, age) {
            this.Gender = gender;
            this.Place = place;
            this.Visiting = visit;
            this.Age = age;
        }
    }
    class Questionnaire {
        Id;
        Emotions;
        Differentiation;
        Comm;
        constructor(id, emotions, diff, comm) {
            this.Id = id;
            this.Emotions = emotions;
            this.Differentiation = diff;
            this.Comm = comm;
        }
    }
    async function GetData() {
        const response = await fetch(path + "/HazarNabeg/GetCoordinates",
            {
                method: "GET",
                headers: { "Accept": "application/json" }
            });
        if (response.ok === true) {
            let data = await response.json();
            return JSON.parse(data);
        }
    }
    var questionnaires = document.getElementById("quests");
    var listQuest = [];
    var colorChose = "green";
    var myMap = null;
    var hazar = null;
    var Border1 = null;
    var Border2 = null;
    var Border3 = null;
    var Border4 = null;
    var Border5 = null;
    var Border6 = null;
    ymaps.ready(initAdd);

    async function initAdd() {
        hazar = await GetData();
        myMap = new ymaps.Map("map",
            {
                center: [hazar.X, hazar.Y],
                zoom: 15

            });
        SetBorder();
    }
    document.getElementById("createPolygon").addEventListener("click", createPolygon);
    function createPolygon() {
        var radiobuttons = document.getElementsByName("emot");
        for (var i = 0; i < radiobuttons.length; i++) {
            if (radiobuttons[i].checked == true) {
                colorChose = radiobuttons[i].value;
                break;
            }
        }
        polygon = new ymaps.Polygon([], {},
            {
                editorDrawingCursor: "crosshair",
                editorMaxPoints: 8,
                fillColor: colorChose,
                strokeColor: colorChose,
                strokeWidth: 5,
            });
        myMap.geoObjects.add(polygon);
        polygon.editor.startDrawing();
        console.log(listQuest);
    }
    document.getElementById("createQuest").addEventListener("click", function () {
        var genVal = diffVal(document.getElementsByName("Gender"));
        var placeVal = diffVal(document.getElementsByName("Place"));
        var visitorVal = diffVal(document.getElementsByName("Visiting"));
        var ageVal = diffVal(document.getElementsByName("Age"));
        var diff = new Diffetentiation(genVal, placeVal, visitorVal, ageVal);
        var emotionList = [];
        DelBorder();
        myMap.geoObjects.each(function (obj, objIndex) {
            emotionList.push(new Emotion(obj.geometry.getCoordinates(), obj.geometry.options._parent._options.fillColor));
            console.log(obj);
        });
        var quest = new Questionnaire(listQuest.length, JSON.stringify(emotionList), JSON.stringify(diff), null);
        listQuest.push(quest);
        console.log(listQuest);
        myMap.geoObjects.removeAll();
        SetBorder();
    });

    ymaps.ready(initLook)
    function initLook() {
        var lookMap = new ymaps.Map("mapLook",
            {
                center: [1, 1],
                zoom: 15
            });
        document.getElementById("addDiv").addEventListener("click", function () {
            var add = document.getElementById("addVar");
            var push = document.getElementById("pushVar");
            push.setAttribute("style", "display:none");
            add.setAttribute("style", "");
        });

        document.getElementById("lookDiv").addEventListener("click", function () {
            var add = document.getElementById("addVar");
            var push = document.getElementById("pushVar");
            add.setAttribute("style", "display:none");
            push.setAttribute("style", "");
            lookMap.setCenter([hazar.X, hazar.Y], 15);
            var del = document.getElementById("container");
            if (del != null) {
                del.remove();
            }
            let container = document.createElement('div');
            container.setAttribute("id", "container");
            questionnaires.appendChild(container);
            for (var i = 0; i < listQuest.length; i++) {
                let div = document.createElement('div');
                div.className = "alert";
                div.innerHTML = "Анкета № " + (i + 1);
                div.setAttribute("id", "main_" + listQuest[i].Id);

                let lookbtn = document.createElement('button');
                lookbtn.innerText = "Просмотр";
                lookbtn.setAttribute("id", "anketa_" + listQuest[i].Id);

                let delbtn = document.createElement('button');
                delbtn.innerText = "Удалить";
                delbtn.setAttribute("id", "del" + listQuest[i].Id);

                div.appendChild(lookbtn);
                div.appendChild(delbtn);

                container.appendChild(div);


                document.getElementById("anketa_" + listQuest[i].Id).addEventListener("click", () => func(lookbtn.id));
                document.getElementById("del" + listQuest[i].Id).addEventListener("click", () => delet(div.id));
            }
        });
        function func(pp) {
            var item = listQuest.find(item => item.Id == pp.substring(7));
            console.log(item);
            var emot = JSON.parse(item.Emotions);
            lookMap.geoObjects.removeAll();
            for (n of emot) {
                console.log(n)
                var polygon = DrawEmotion(n);
                lookMap.geoObjects.add(polygon);
            }

        }
        function delet(ii) {
            var item = listQuest.find(item => item.Id == ii.substring(4));
            let remIndex = listQuest.indexOf(item);
            listQuest.splice(remIndex);
            var rm = document.getElementById(ii);
            rm.remove();
            lookMap.geoObjects.removeAll();
        }
        document.getElementById("sendBtn").addEventListener("click", send);
        async function send() {
            console.log(listQuest);
            const response = await fetch(`/HazarNabeg/GiveQuestionnaire`, {
                method: 'POST',
                headers: {
                    'Content-type': 'application/json',
                },
                body: JSON.stringify({
                    Quastionnaires: listQuest,
                })
            });
            if (response.ok === true) {
                alert("Данные отправлены");
                lookMap.geoObjects.removeAll();
                listQuest.splice(0, listQuest.length);
                var del = document.getElementById("container");
                if (del != null) {
                    del.remove();
                }
            }
            else {
                const error = await response.json();
                console.log(error.message);
            }
        }
    }
    document.getElementById("teach").addEventListener("click", teacher);
    function teacher() {
        let teachDiv = document.getElementById("parent_popup");
        teachDiv.setAttribute("style", "");
    }
    function SetBorder() {
        Border1 = new ymaps.Polyline(
            [[54.81381547028136, 56.058855168250936], [54.81978506189913, 56.057144323137514], [54.82061663545558, 56.05780123918561], [54.82004358269541, 56.059759251766465],
            [54.81972762578878, 56.05949103086499], [54.81807788083479, 56.05995757290714], [54.818353206147655, 56.06327814766757], [54.81694680996119, 56.0635892839133], [54.81402263845585, 56.06174321584752],
            [54.81381547028136, 56.058855168250936]], {},
            {
                strokeWidth: 5,
                strokeColor: '#ff0000'
            });
        Border2 = new ymaps.Polyline(
            [[54.818822209793694, 56.067258947081115], [54.81952228359511, 56.067307226843404], [54.81986302307071, 56.06764518517927], [54.820287394561795, 56.06857322949845], [54.81956874823908, 56.06930815476852],
            [54.819389084651455, 56.069002382940816], [54.8192249086022, 56.06884145039992], [54.81899568054412, 56.06886290807203], [54.818822209793694, 56.067258947081115]], {},
            {
                strokeWidth: 5,
                strokeColor: '#ff0000'
            });
        Border3 = new ymaps.Polyline(
            [[54.72267068870143, 56.01271888931717], [54.723341385095786, 56.01157090385876], [54.724095905214504, 56.01257941444838], [54.7239592853337, 56.01280472000565], [54.72437535352996, 56.0133733483168],
            [54.724946664063026, 56.01359328945603], [54.72558316898897, 56.01462325771771], [54.72506154618249, 56.016243311962704], [54.72267068870143, 56.01271888931717]], {},
            {
                strokeWidth: 5,
                strokeColor: '#ff0000'
            });
        Border4 = new ymaps.Polyline(
            [[54.725387894949755, 55.969689626240275], [54.72625104586402, 55.97008659317448], [54.726033707445126, 55.971556443714626], [54.7251332929521, 55.97113265469029], [54.725387894949755, 55.969689626240275]], {},
            {
                strokeWidth: 5,
                strokeColor: '#ff0000'
            });
        Border5 = new ymaps.Polyline(
            [[54.71693155925201, 55.99654339621368], [54.7171784491901, 55.99713616440598], [54.71701075052875, 55.99740974972548], [54.71734925266595, 55.99825196335618], [54.717041805888975, 55.99876158306899],
            [54.71672038175441, 55.99810175965134], [54.71647504180358, 55.99825464556517], [54.71617704766842, 55.99751781341211], [54.71693155925201, 55.99654339621368]
            ], {},
            {
                strokeWidth: 5,
                strokeColor: '#ff0000'
            });
        Border6 = new ymaps.Polyline(
            [[54.77159315450484, 56.01339989740415], [54.772228923378734, 56.014671264477215], [54.77198392095236, 56.015105782337606], [54.771320236007384, 56.01399534780548], [54.77159315450484, 56.01339989740415]], {},
            {
                strokeWidth: 5,
                strokeColor: '#ff0000'
            });
        myMap.geoObjects.add(Border1);
        myMap.geoObjects.add(Border2);
        myMap.geoObjects.add(Border3);
        myMap.geoObjects.add(Border4);
        myMap.geoObjects.add(Border5);
        myMap.geoObjects.add(Border6);
    }
    function DelBorder() {
        myMap.geoObjects.remove(Border1);
        myMap.geoObjects.remove(Border2);
        myMap.geoObjects.remove(Border3);
        myMap.geoObjects.remove(Border4);
        myMap.geoObjects.remove(Border5);
        myMap.geoObjects.remove(Border6);
    }
    function diffVal(list) {
        for (var i = 0; i < list.length; i++) {
            if (list[i].checked) {
                return list[i].value;
            }
        }
        return "";
    }
    function DrawEmotion(emot) {
        if (emot.Points.length == 3) {
            return new ymaps.Polygon(
                [[
                    [emot.Points[0].X, emot.Points[0].Y],
                    [emot.Points[1].X, emot.Points[1].Y],
                    [emot.Points[2].X, emot.Points[2].Y],
                ]], {},
                {
                    // Цвет заливки.
                    fillColor: emot.Color,
                    // Цвет обводки.
                    strokeColor: emot.Color,
                    // Ширина обводки.
                    strokeWidth: 5
                });
        }
        else if (emot.Points.length == 4) {
            return new ymaps.Polygon(
                [[
                    [emot.Points[0].X, emot.Points[0].Y],
                    [emot.Points[1].X, emot.Points[1].Y],
                    [emot.Points[2].X, emot.Points[2].Y],
                    [emot.Points[3].X, emot.Points[3].Y],
                ]], {},
                {
                    // Цвет заливки.
                    fillColor: emot.Color,
                    // Цвет обводки.
                    strokeColor: emot.Color,
                    // Ширина обводки.
                    strokeWidth: 5
                });
        }
        else if (emot.Points.length == 5) {
            return new ymaps.Polygon(
                [[
                    [emot.Points[0].X, emot.Points[0].Y],
                    [emot.Points[1].X, emot.Points[1].Y],
                    [emot.Points[2].X, emot.Points[2].Y],
                    [emot.Points[3].X, emot.Points[3].Y],
                    [emot.Points[4].X, emot.Points[4].Y],
                ]], {},
                {
                    // Цвет заливки.
                    fillColor: emot.Color,
                    // Цвет обводки.
                    strokeColor: emot.Color,
                    // Ширина обводки.
                    strokeWidth: 5
                });
        }
        else if (emot.Points.length == 6) {
            return new ymaps.Polygon(
                [[
                    [emot.Points[0].X, emot.Points[0].Y],
                    [emot.Points[1].X, emot.Points[1].Y],
                    [emot.Points[2].X, emot.Points[2].Y],
                    [emot.Points[3].X, emot.Points[3].Y],
                    [emot.Points[4].X, emot.Points[4].Y],
                    [emot.Points[5].X, emot.Points[5].Y],
                ]], {},
                {
                    // Цвет заливки.
                    fillColor: emot.Color,
                    // Цвет обводки.
                    strokeColor: emot.Color,
                    // Ширина обводки.
                    strokeWidth: 5
                });
        }
        else if (emot.Points.length == 7) {
            return new ymaps.Polygon(
                [[
                    [emot.Points[0].X, emot.Points[0].Y],
                    [emot.Points[1].X, emot.Points[1].Y],
                    [emot.Points[2].X, emot.Points[2].Y],
                    [emot.Points[3].X, emot.Points[3].Y],
                    [emot.Points[4].X, emot.Points[4].Y],
                    [emot.Points[5].X, emot.Points[5].Y],
                    [emot.Points[6].X, emot.Points[6].Y],
                ]], {},
                {
                    // Цвет заливки.
                    fillColor: emot.Color,
                    // Цвет обводки.
                    strokeColor: emot.Color,
                    // Ширина обводки.
                    strokeWidth: 5
                });
        }
        else if (emot.Points.length == 8) {
            return new ymaps.Polygon(
                [[
                    [emot.Points[0].X, emot.Points[0].Y],
                    [emot.Points[1].X, emot.Points[1].Y],
                    [emot.Points[2].X, emot.Points[2].Y],
                    [emot.Points[3].X, emot.Points[3].Y],
                    [emot.Points[4].X, emot.Points[4].Y],
                    [emot.Points[5].X, emot.Points[5].Y],
                    [emot.Points[6].X, emot.Points[6].Y],
                    [emot.Points[7].X, emot.Points[7].Y],
                ]], {},
                {
                    // Цвет заливки.
                    fillColor: emot.Color,
                    // Цвет обводки.
                    strokeColor: emot.Color,
                    // Ширина обводки.
                    strokeWidth: 5
                });
        }
        else if (emot.Points.length == 9) {
            return new ymaps.Polygon(
                [[
                    [emot.Points[0].X, emot.Points[0].Y],
                    [emot.Points[1].X, emot.Points[1].Y],
                    [emot.Points[2].X, emot.Points[2].Y],
                    [emot.Points[3].X, emot.Points[3].Y],
                    [emot.Points[4].X, emot.Points[4].Y],
                    [emot.Points[5].X, emot.Points[5].Y],
                    [emot.Points[6].X, emot.Points[6].Y],
                    [emot.Points[7].X, emot.Points[7].Y],
                    [emot.Points[8].X, emot.Points[8].Y],
                ]], {},
                {
                    // Цвет заливки.
                    fillColor: emot.Color,
                    // Цвет обводки.
                    strokeColor: emot.Color,
                    // Ширина обводки.
                    strokeWidth: 5
                });
        }
    }
    </script>
