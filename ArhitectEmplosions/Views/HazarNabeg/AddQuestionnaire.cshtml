@model Models.HazarNabeg.HazarNabeg
@{
}
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <style>
        .alert {
            padding: 15px;
            border: 1px solid #d6e9c6;
            border-radius: 4px;
            color: #3c763d;
            background-color: #dff0d8;
        }
    </style>
    <title>Быстрый старт. Размещение интерактивной карты на странице</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <script src="https://api-maps.yandex.ru/2.1/?apikey=d5e25ddd-0718-4acb-a851-ff855eddb60d&lang=ru_RU" type="text/javascript"> </script>
</head>
<body>
    <input type ="button" id="addDiv" value="Добавление анкет"/>
    <input type ="button" id="lookDiv" value="Проверка введенных данных"/>
    <div id="addVar">
        <div style="display:flex; justify-content: space-between; margin-top:10px; height: 100%">
            <div style="width:400px; height: 820px; display:flex; flex-direction:column; font-size: 13px;">
                <div style=" width:200px; display:flex; flex-direction:column;">
                    <h3>Пол</h3>
                    <div style="height:20%; display:flex; justify-content:space-between">
                        <p><input type="radio" name="Gender" value="Муж" checked />Муж </p>
                        <p><input type="radio" name="Gender" value="Жен" />Жен</p>
                    </div>
                </div>

                <h3>Где вы живете?</h3>
                <div style="display:flex; flex-direction:column; flex-wrap: wrap; height:20%">
                    <p><input type="radio" name="Place" value="В общежитии" checked />В общежитии</p>
                    <p><input type="radio" name="Place" value="Район Черниковка" />Район Черниковка</p>
                    <p><input type="radio" name="Place" value="В другой части города" />В другой части города</p>
                    <p><input type="radio" name="Place" value="За городом" />За городом </p>
                    <p><input type="radio" name="Place" value="В другом городе" />В другом городе </p>
                </div>

                <h3>Вы посещаете кампус как:</h3>
                <div style=" display:flex; flex-direction:column;flex-wrap: wrap; height:20%">
                    <p><input type="radio" name="Visiting" value="Студент-бакалавр" checked/>Студент-бакалавр</p>
                    <p><input type="radio" name="Visiting" value="Студент-Магистр" />Студент-Магистр</p>
                    <p><input type="radio" name="Visiting" value="Студент-аспирант" />Студент-аспирант</p>
                    <p><input type="radio" name="Visiting" value="Преподаватель" />Преподаватель</p>
                    <p><input type="radio" name="Visiting" value="Сотрудник ВУЗа" />Сотрудник ВУЗа</p>
                    <p><input type="radio" name="Visiting" value="Гость" />Гость</p>
                    <p><input type="radio" name="Visiting" value="Партнер ВУЗа" />Партнер ВУЗа</p>
                    <p><input type="radio" name="Visiting" value="Горожанин" />Горожанин</p>
                </div>

                <h3>Возраст</h3>
                <div style=" display:flex; flex-direction:column; flex-wrap: wrap; height:20%">
                    <p><input type="radio" name="Age" value="14-17" checked/>14-17</p>
                    <p><input type="radio" name="Age" value="18-24" />18-24</p>
                    <p><input type="radio" name="Age" value="25-35" />25-35</p>
                    <p><input type="radio" name="Age" value="36-45" />36-45</p>
                    <p><input type="radio" name="Age" value="46-60" />46-60</p>
                    <p><input type="radio" name="Age" value="61-74" />61-74</p>
                    <p><input type="radio" name="Age" value="75 и более" />75 и более</p>
                </div>
            </div>
            <div id="map" style="width: 1200px; height: 820px; border:solid; margin-right:10px"></div>
            <div style="display:flex; flex-direction:column; height: 820px; margin-left:10px">
                <div>
		            <h2>Комментарии к положительным эмоциям</h2>
		            <textarea id="comment" name="comment" placeholder="Написать комментарий" cols="45" rows="3"></textarea>
                    <h2>Комментарии к отрицательным эмоциям</h2>
                    <textarea id="comment" name="comment" placeholder="Написать комментарий" cols="45" rows="3"></textarea>
                    <h2>Комментарии к нейтральным эмоциям</h2>
                    <textarea id="comment" name="comment" placeholder="Написать комментарий" cols="45" rows="3"></textarea>
                </div>
                <div>
		            <h2>Добавить эмоцию</h2>
                    <input type="radio" name="emot" value="#58FF008F" checked />Положительная<br>
                    <input type="radio" name="emot" value="#FF00008F" />Отрицательная<br>
                    <input type="radio" name="emot" value="#FFF200AB" />Нейтральная<br>
                    <button id="createQuest">Создать анкету</button><br>
                    <button id="createPolygon">Создать эмоцию</button><br>
                    <input type="button" value="Завершить редактирование" id="stopEditPolyline"/> <br>
                </div>
	        </div>
	    </div>
    </div>
    <div style="display:none" id="pushVar">
        <div style="display:flex; margin-top:10px; height: 100%">
            <div style="width:25%;">
                <div id="quests">

                </div>
                <button id="sendBtn">Отправить</button>
            </div>
            <div id="mapLook" style="width: 70%; height: 820px;"></div>
        </div>
    </div>
        <script>
            //classes for quest
            class Point 
            {
                X;
                Y;
            }
            class Emotion 
            { 
                Color;
                Points;
                constructor() { 
                    this.Points = [];
                }
            }
            class Diffetentiation { 
                Gender;
                Place;
                Visiting;
                Age;
            }
            class Questionnaire {
                Id;
                Differentiation;
                PositiveComm;
                NegativeComm;
                NeutralComm;
                Emotions;
                HazarNabegId;
                HazarNabeg;
                hazarUserId;
                DateTime;
                constructor() {
                    this.Emotions = [];
                }
            }
            var questionnaires = document.getElementById("quests");
            var listQuest = [];
            var quest = new Questionnaire();
            var Hazar = "";
            ymaps.ready(initAdd);
        
            function initAdd() 
            {

                const reuqestUrl = "/HazarNabeg/GetQuestionnaires";
                const xhr = new XMLHttpRequest();
                xhr.open("Get", reuqestUrl);
                xhr.responseType = "json";
                xhr.onload = () => {
                    Hazar = JSON.parse(xhr.response);
                    var myMap = new ymaps.Map("map",
                        {
                            center: [Hazar.X, Hazar.Y],
                            zoom: 15

                        });

                    document.getElementById("createPolygon").addEventListener("click", createPolygon);
                    function createPolygon() {
                        var emotion = new Emotion();
                        var radiobuttons = document.getElementsByName("emot");
                        for (var i = 0; i < radiobuttons.length; i++) {
                            if (radiobuttons[i].checked == true) {
                                emotion.Color = radiobuttons[i].value;
                                break;
                            }
                        }
                        polygon = new ymaps.Polygon([], {},
                        {
                            editorDrawingCursor: "crosshair",
                            editorMaxPoints: 5,
                            fillColor: emotion.Color,
                            strokeColor: emotion.Color,
                            strokeWidth: 5
                        });
                        myMap.geoObjects.add(polygon);
                        polygon.editor.startDrawing();

                        $('input').attr('disabled', false);

                        $('#stopEditPolyline').click(function () {
                            $('#stopEditPolyline').attr('disabled', true);
                            polygon.editor.stopEditing();
                            var coord = polygon.geometry.getCoordinates();

                            var point1 = new Point();
                            point1.X = coord[0][0][0];
                            point1.Y = coord[0][0][1];

                            var point2 = new Point();
                            point2.X = coord[0][1][0];
                            point2.Y = coord[0][1][1];

                            var point3 = new Point();
                            point3.X = coord[0][2][0];
                            point3.Y = coord[0][2][1];

                            var point4 = new Point();
                            point4.X = coord[0][3][0];
                            point4.Y = coord[0][3][1];
                            if (emotion.Points.length != 4) {
                                emotion.Points.push(point1);
                                emotion.Points.push(point2);
                                emotion.Points.push(point3);
                                emotion.Points.push(point4);
                                quest.Emotions.push(emotion);
                            }
                            $('stopEditPolyline').attr('disabled', false);
                        });
                    }
                    function diffVal(list) {
                        for (var i = 0; i < list.length; i++) {
                            if (list[i].checked) {
                                return list[i].value;
                            }
                        }
                        return "";
                    }
                    document.getElementById("createQuest").addEventListener("click", function () {
                        var genVal = diffVal(document.getElementsByName("Gender"));
                        var placeVal = diffVal(document.getElementsByName("Place"));
                        var visitorVal = diffVal(document.getElementsByName("Visiting"));
                        var ageVal = diffVal(document.getElementsByName("Age"));
                        var diff = new Diffetentiation();
                        diff.Gender = genVal;
                        diff.Place = placeVal;
                        diff.Visiting = visitorVal;
                        diff.Age = ageVal;
                        quest.Differentiation = diff;
                        listQuest.push(quest);
                        quest = new Questionnaire();
                        myMap.geoObjects.removeAll();
                    });
                }
                xhr.send();
            }

            ymaps.ready(initLook)
            function initLook()
            {
                var lookMap = new ymaps.Map("mapLook",
                {
                    center: [30, 30],
                    zoom: 15
                });
                document.getElementById("addDiv").addEventListener("click", function () {
                    var add = document.getElementById("addVar");
                    var push = document.getElementById("pushVar");
                    push.setAttribute("style", "display:none");
                    add.setAttribute("style", "");
                });

                document.getElementById("lookDiv").addEventListener("click", function () {
                    var add = document.getElementById("addVar");
                    var push = document.getElementById("pushVar");
                    add.setAttribute("style", "display:none");
                    push.setAttribute("style", "");
                lookMap.setCenter([Hazar.X, Hazar.Y], 15);
                    for (var i = 0; i < listQuest.length; i++) {
                        var del = document.getElementById("look" + i);
                        if (del != null) { 
                            del.remove();
                        }
                    }
                    for (var i = 0; i < listQuest.length; i++) {
                        let div = document.createElement('div');
                        div.className = "alert";
                        div.innerHTML = "Анкета № "+(i+1);
                        div.setAttribute("id", "look" + i);
                        let btn = document.createElement('button');
                        btn.setAttribute("id", "del" + i);
                        btn.innerText = "Удалить";
                        div.appendChild(btn);
                        questionnaires.appendChild(div);
                        document.getElementById("look" + i).addEventListener("click", () => func(div.id));
                        document.getElementById("del" + i).addEventListener("click", () => delet(div.id));
                    }
                });
                function func(pp) 
                {
                    var item = listQuest[pp.slice(4)];
                    lookMap.geoObjects.removeAll();
                    for (n of item.Emotions) { 
                        var polygon = new ymaps.Polygon(
                            [[
                                [n.Points[0].X, n.Points[0].Y],
                                [n.Points[1].X, n.Points[1].Y],
                                [n.Points[2].X, n.Points[2].Y],
                                [n.Points[3].X, n.Points[3].Y],
                            ]], {},
                            {
                                editorMaxPoints: 5,
                                // Цвет заливки.
                                fillColor: n.Color,
                                // Цвет обводки.
                                strokeColor: n.Color,
                                // Ширина обводки.
                                strokeWidth: 5

                            });
                            lookMap.geoObjects.add(polygon);
                    }

                }
                function delet(ii) {
                    var rm = document.getElementById(ii);
                    rm.remove();
                }
                document.getElementById("sendBtn").addEventListener("click", send);
                async function send() {
                    const response = await fetch(`/HazarNabeg/GiveQuestionnaire`, {
                        method: 'POST',
                        headers: {
                            'Content-type': 'application/json',
                        },
                        body: JSON.stringify({
                            Quastionnaires: listQuest,
                        })
                    });
                    if (response.ok === true) {
                        console.log("excellent");
                    }
                    else {
                        const error = await response.json();
                        console.log(error.message);
                    }
                }
            }
        </script>
    </body>
</html>