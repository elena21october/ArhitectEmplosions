<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <style>
        .alert {
            padding: 15px;
            border: 1px solid #d6e9c6;
            border-radius: 4px;
            color: #3c763d;
            background-color: #dff0d8;
        }
    </style>
    <title>Быстрый старт. Размещение интерактивной карты на странице</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <script src="https://api-maps.yandex.ru/2.1/?apikey=d5e25ddd-0718-4acb-a851-ff855eddb60d&lang=ru_RU" type="text/javascript"> </script>
</head>
<body>
    <h1 id="Hazar">Просмотр пересечений</h1>
    <div style="display:flex; justify-content: center">
        
        <div style="display:flex;">
            <div id="map" style="width: 1200px; height: 820px"></div>
        </div>
    </div>
    <script type="text/javascript">
        async function GetData() {
            const response = await fetch("/HazarNabeg/GetQuestionnaires",
                {
                    method: "GET",
                    headers: { "Accept": "application/json" }
                });
            if (response.ok === true) {
                let data = await response.json();
                console.log(data);
                return JSON.parse(data);
            }
        }
        let hazar = null;
        var Border1 = null;
        var Border2 = null;
        var Border3 = null;
        var Border4 = null;
        var Border5 = null;
        var Border6 = null;
        ymaps.ready(init);
        async function init() {
            var Hazar = await GetData();
            var myMap = new ymaps.Map("map",
            {
                center: [Hazar.X, Hazar.Y],
                zoom: 14
            });

            DrawAll();

            function DrawEmotion(coll, btn = 0) {
                try {
                    if (btn != 0) {
                        myMap.geoObjects.removeAll();
                    }
                    for (var i = 0; i < coll.length; i++) {
                        var polygon = DrawEmotions(coll[i]);
                        myMap.geoObjects.add(polygon);
                    }
                }
                catch (ex) {
                    console.log(coll);
                    console.log(ex);
                }
            }
            function DrawAll() {
                myMap.geoObjects.removeAll();
                DrawEmotion(Hazar.PositiveEmotions);
                DrawEmotion(Hazar.NegativeEmotions);
            }
        }

        function DrawEmotions(emot) {
            if (emot.Points.length == 3) {
                return new ymaps.Polygon(
                    [[
                        [emot.Points[0].X, emot.Points[0].Y],
                        [emot.Points[1].X, emot.Points[1].Y],
                        [emot.Points[2].X, emot.Points[2].Y],
                    ]], {},
                    {
                        // Цвет заливки.
                        fillColor: emot.Color,
                        // Цвет обводки.
                        strokeColor: emot.Color,
                        // Ширина обводки.
                        strokeWidth: 5
                    });
            }
            else if (emot.Points.length == 4) {
                return new ymaps.Polygon(
                    [[
                        [emot.Points[0].X, emot.Points[0].Y],
                        [emot.Points[1].X, emot.Points[1].Y],
                        [emot.Points[2].X, emot.Points[2].Y],
                        [emot.Points[3].X, emot.Points[3].Y],
                    ]], {},
                    {
                        // Цвет заливки.
                        fillColor: emot.Color,
                        // Цвет обводки.
                        strokeColor: emot.Color,
                        // Ширина обводки.
                        strokeWidth: 5
                    });
            }
            else if (emot.Points.length == 5) {
                return new ymaps.Polygon(
                    [[
                        [emot.Points[0].X, emot.Points[0].Y],
                        [emot.Points[1].X, emot.Points[1].Y],
                        [emot.Points[2].X, emot.Points[2].Y],
                        [emot.Points[3].X, emot.Points[3].Y],
                        [emot.Points[4].X, emot.Points[4].Y],
                    ]], {},
                    {
                        // Цвет заливки.
                        fillColor: emot.Color,
                        // Цвет обводки.
                        strokeColor: emot.Color,
                        // Ширина обводки.
                        strokeWidth: 5
                    });
            }
            else if (emot.Points.length == 6) {
                return new ymaps.Polygon(
                    [[
                        [emot.Points[0].X, emot.Points[0].Y],
                        [emot.Points[1].X, emot.Points[1].Y],
                        [emot.Points[2].X, emot.Points[2].Y],
                        [emot.Points[3].X, emot.Points[3].Y],
                        [emot.Points[4].X, emot.Points[4].Y],
                        [emot.Points[5].X, emot.Points[5].Y],
                    ]], {},
                    {
                        // Цвет заливки.
                        fillColor: emot.Color,
                        // Цвет обводки.
                        strokeColor: emot.Color,
                        // Ширина обводки.
                        strokeWidth: 5
                    });
            }
            else if (emot.Points.length == 7) {
                return new ymaps.Polygon(
                    [[
                        [emot.Points[0].X, emot.Points[0].Y],
                        [emot.Points[1].X, emot.Points[1].Y],
                        [emot.Points[2].X, emot.Points[2].Y],
                        [emot.Points[3].X, emot.Points[3].Y],
                        [emot.Points[4].X, emot.Points[4].Y],
                        [emot.Points[5].X, emot.Points[5].Y],
                        [emot.Points[6].X, emot.Points[6].Y],
                    ]], {},
                    {
                        // Цвет заливки.
                        fillColor: emot.Color,
                        // Цвет обводки.
                        strokeColor: emot.Color,
                        // Ширина обводки.
                        strokeWidth: 5
                    });
            }
            else if (emot.Points.length == 8) {
                return new ymaps.Polygon(
                    [[
                        [emot.Points[0].X, emot.Points[0].Y],
                        [emot.Points[1].X, emot.Points[1].Y],
                        [emot.Points[2].X, emot.Points[2].Y],
                        [emot.Points[3].X, emot.Points[3].Y],
                        [emot.Points[4].X, emot.Points[4].Y],
                        [emot.Points[5].X, emot.Points[5].Y],
                        [emot.Points[6].X, emot.Points[6].Y],
                        [emot.Points[7].X, emot.Points[7].Y],
                    ]], {},
                    {
                        // Цвет заливки.
                        fillColor: emot.Color,
                        // Цвет обводки.
                        strokeColor: emot.Color,
                        // Ширина обводки.
                        strokeWidth: 5
                    });
            }
            else if (emot.Points.length == 9) {
                return new ymaps.Polygon(
                    [[
                        [emot.Points[0].X, emot.Points[0].Y],
                        [emot.Points[1].X, emot.Points[1].Y],
                        [emot.Points[2].X, emot.Points[2].Y],
                        [emot.Points[3].X, emot.Points[3].Y],
                        [emot.Points[4].X, emot.Points[4].Y],
                        [emot.Points[5].X, emot.Points[5].Y],
                        [emot.Points[6].X, emot.Points[6].Y],
                        [emot.Points[7].X, emot.Points[7].Y],
                        [emot.Points[8].X, emot.Points[8].Y],
                    ]], {},
                    {
                        // Цвет заливки.
                        fillColor: emot.Color,
                        // Цвет обводки.
                        strokeColor: emot.Color,
                        // Ширина обводки.
                        strokeWidth: 5
                    });
            }
        }
    </script>
</body>
</html>